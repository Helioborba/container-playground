version: "3"
services:
    client:
        stdin_open: true
        #command: npm run start
        build:
            context: "./client"
            dockerfile: Dockerfile
        restart: on-failure
        volumes:
            - 'D:/workshop/container-playground/client:/client'
    
        environment:
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            - REDIS_PASSWORD=eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
        depends_on:
            - worker
    server_worker:
        stdin_open: true
        #command: npm run start
        build:
            context: "./serverWorker"
            dockerfile: Dockerfile
        restart: on-failure
        volumes:
            - 'D:/workshop/container-playground/serverWorker:/serverWorker'
       
        environment:
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            - REDIS_PASSWORD=eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
        depends_on:
            - redis
    worker:
        stdin_open: true
        #command: npm run start
        build:
            context: "./worker"
            dockerfile: Dockerfile
        restart: on-failure
        volumes:
            - 'D:/workshop/container-playground/worker:/worker'
        environment:
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            - REDIS_PASSWORD=eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
        depends_on:
            - redis

    # api:
    #     stdin_open: true
    #     environment:
    #         - NODE_ENV=development
    #         - CHOKIDAR_USEPOLLING=true
    #     build: 
    #         context: "./api"
    #         dockerfile: Dockerfile.dev
    #     restart: on-failure
    #     volumes: 
    #         - /api/node_modules
    #         - 'D:/workshop/live-data/api:/api'
    # nginx:
    #     restart: always
    #     build: 
    #         context: ./nginx
    #         dockerfile: Dockerfile.dev
    #     ports:
    #         - "5000:80"
    #     depends_on: 
    #         - client
    #         - client_php
    # client_php:
    #     stdin_open: true
    #     build:
    #         context: "./client/"
    #         dockerfile: Dockerfile
    #     restart: on-failure
    #     volumes:
    #         - ./client/src:/var/www/html/
    #     environment: 
    #         - URL=mysql_db
    #         - USERDB=user
    #         - PASS=password
    #         - DB=inventario
    #     ports:         
    #         - "2000:80"
    #     links:
    #         - mysql_db
    redis:
        image: redis
        restart: on-failure
        ports:
        - "6379:6379"
        command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
        volumes: 
        - ./redis/cache:/data
    nginx:
        restart: always
        build: 
            context: ./nginx
            dockerfile: Dockerfile.dev
        ports:
            - "3000:80"
        depends_on: 
            - client
            - server_worker
        volumes: 
        - ./nginx/default_dev.conf:/etc/nginx/conf.d/default.conf
    # mysql_db:
    #     build:
    #         context: "./mysql/"
    #         dockerfile: Dockerfile
    #     ports:
    #         - 3306:3306
    #     volumes:
    #         - ./mysql/Dump20220503.sql:/docker-entrypoint-initdb.d/Dump20220503.sql

    # adminer:
    #     image: adminer
    #     restart: always
    #     ports:
    #     - 1000:8080